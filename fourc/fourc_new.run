reset;

#option solver minos;
#option solver snopt; #not great...
#option solver bonmin;
#option solver ipopt; 
#options ipopt_options "halt_on_ampl_error=yes";
#option solver loqo; #give the same answer as ipopt
#option solver couenne; bad results
#option solver conopt; #it returns good result even if we set budget to 0, but it's big in the middle
#option solver knitro; #demo licence not sufficient
#option solver lgo;#demo licence not sufficient
#option solver lindo global;#demo licence not sufficient
option display_precision 8;

#data ../improved.data;
model fourc_new.mod;



param j = 4; # four coloring
param p = 600; #number of pieces
param start = 0; #k/n starting ratio, we can set it to a value that corresponds to harder instances
param b_k = 3/4; #k/n ratio upper bound
param length = (b_k - start)/p; #let length be the length of each piece

let base := start;

for {i in 1..p}{
	display b_k,base,length;
	
	if base >= b_k then break;
	
	let l := base;
	let u := l + length;
	let b_s := 1 - l; #upper bound of independent set size
	
	solve;
		
		
	printf "\n---START %d round---\n", i;
	display _varname, _var, _var.rc,base,l,u,b_k,b_s,alpha,run_w,run_b,run;
	printf "\n---END %d round---\n", i;
	
	printf "%11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f\n",
    l,u,run_w,2^run_b, run,w1, wk6, wk5, wk4, wk3,wk2,ws,alpha6, alpha5,alpha4, alpha3, alpha2,alpha > ("./f/all_" & j & ".out");
	
	printf "%11.8f %11.8f %11.8f %11.8f %11.8f\n",
    l,u,run_w,2^run_b, run > ("./f/runtime_" & j & ".out");
    
    printf "%11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f\n",
    l,u,w1, wk6, wk5,wk4, wk3,wk2,ws > ("./f/weights_" & j & ".out");
   
    printf "%11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f %11.8f\n",
    l,u,alpha6, alpha5,alpha4, alpha3, alpha2,alpha > ("./f/thresholds_" & j & ".out");
	
		
	  	
	let base := u;
  	let w1 := 0;
  	let wk6 := 0;
  	let wk5 := 0;
	let wk4 := 0;
	let wk3 := 0;
	let wk2 := 0;
	let ws := 0;
	let alpha6 := 0;
	let alpha5 := 0;
	let alpha4 := 0;
	let alpha3 := 0;
	let alpha2 := 0;
	let alpha := 0;
	let run := 0;
}

/*	

reset;
model test_input_d.mod;
printf "-------------------------------------------------------------------------------------\n";
printf "TESTING single input, before solving\n";
display step,l,l_minus_1_rt,budget_k_base,budget_k_l,budget_k_u,budget_k,threshold_d4,threshold_d3,threshold_d2,threshold,c,budget_is,run_silly_branching,run_tw_vc_bound;
display w1,wk_d4,wk_d3,wk_d2,wis,run,run_tw,mini_run; 
			
solve;#display _varname, _var, _var.rc,budget_k_l,budget_k,budget_is,threshold, 2^run_silly_branching,run_mls,run;
printf "------After solving------";
display _varname, _var, _var.rc,budget_k_base,budget_k_l,budget_k_u,budget_k,budget_is,threshold, run_tw,2^run_silly_branching,mini_run;
*/
	